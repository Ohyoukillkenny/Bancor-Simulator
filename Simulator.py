from smartToken import *
from customers import *
from market import *
import random
import numpy as np
import sys
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab

class Simulator(object):

    def __init__(self, T = 50, R = 5.0, Nc = 500, sig = 0.1):
        self._timeSlotNum = 1000
        self._timeEpoch = T
        self._bouncingRange = R
        self._custNum = Nc
        self._sigma = sig
        self._KennyCoin = Smartcoin(name='Kenny',reservetokenName='ETH', initCRR=0.5, initPrice=1, initIssueNum=800000)

    # both Bancor and classic Market have to be sychronized in every different time slot
    def sychronizeMarket(market, timeSlot):
        market.sychronize(timeSlot)

    def resetMarket(self):
        self._KennyCoin = Smartcoin(name='Kenny',reservetokenName='ETH', initCRR=0.5, initPrice=1, initIssueNum=800000)

    def BancorSimulating(self):
        MyBancorMarket = BancorMarket(smartToken = self._KennyCoin)
        print 'T:', self._timeEpoch, 'R:', self._bouncingRange, 'Nc:', self._custNum, 'sig:', self._sigma, 'processing...'
        '''
        First of all, we initialize the customer's tokenBalance and reserveBalance
        tokenBalance: 200, reserveBalance: 200
        '''
        custInitReserveBalance = 200
        custInitTokenBalance = 200
        if custInitTokenBalance * self._custNum > (800000 * (1 - 0.5)):
            print 'ERROR, too many init smart tokens holding by customers.'
            sys.exit(0)
        custList = []
        # here we name single customer as Joe. And every customer is initialized with 
        # random value of token balance as well as reserve balance.
        for i in range(self._custNum):
            Joe = Customer(smartToken = self._KennyCoin, market = MyBancorMarket, 
                            tokenBalance = custInitTokenBalance, 
                            reserveBalance = custInitReserveBalance)
            custList.append(Joe)

        # cashTracker records custmers' cash
        # cashTracker = []
        # priceTracker records the change of the smart token's price in Bancor market
        priceTracker = []
        # transaction tracker records the transations' number in each time slot
        txTracker = []
        # canceled transaction tracker records the canceled transactions' number in each time slot
        canceledTxTracker = []

        for j in range(self._timeSlotNum):
            # Sychronize the market
            sychronizeMarket(MyBancorMarket, j)
            # we assume that in every time slot, all customers change their valuation
            currentMarketPrice = MyBancorMarket.getCurrentPrice()
            if (j > 0) and (j % self._timeEpoch == 0):
                ''' 
                We assume the valuation_mu is generated by random, which denotes the mean valuation
                of customers when the good or bad news comes into market on a certain time slot,
                which is divided by bouncing interval.
                '''
                valuation_mu = random.uniform(currentMarketPrice/bouncingRange, currentMarketPrice*bouncingRange)
            else:
                valuation_mu = currentMarketPrice

            custValuation_list = np.random.normal(valuation_mu, sigma, self._custNum)
            for i in range(self._custNum):
                if custValuation_list[i] < 0:
                    # Customer does not want to sell their token in free. 
                    # Here we give them a small valuation when valuation < 0
                    custList[i].changeValuation(0.001*currentMarketPrice)
                else:
                    custList[i].changeValuation(custValuation_list[i])

            '''
            In every time slot, record the information of this time slot in the market, 
                such as Price, transactionNum and cancled Tx Num of this time slot
            '''
            priceTracker.append(self._KennyCoin.getPrice())
            txTracker.append(MyBancorMarket.getTransactionNum())
            canceledTxTracker.append(MyBancorMarket.getCanceledTransactionNum())

            # show some information in terminal
            # print ('In time slot:'+str(j)+' | '+str(MyBancorMarket.getTransactionNum())+
            #     ' happens. And '+str(MyBancorMarket.getCanceledTransactionNum())+' transactions are canceled.')

       



