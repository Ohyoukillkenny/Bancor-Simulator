from smartToken import *
from customers import *
from market import *
import random
import numpy as np
import sys
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab

# the Bancor Market has to be sychronized in every different time slot
def sychronizeMarket(market, timeSlot):
    market.sychronize(timeSlot)

# issue a new smart token
initIssue = 3000000
CRR = 0.2
KennyCoin = Smartcoin(name='Kenny',reservetokenName='ETH',initCRR=0.2, initPrice=1,initIssueNum=initIssue)

# create two different markets
MyBancorMarket = BancorMarket(smartToken = KennyCoin)

TimeSlotNum = 1000
bouncingInterval = 200
bouncingRange = 10.0
custNum = 5000
sigma = 0.1

# the seed of pseudo-random numbers
mySeed = 0
np.random.seed(mySeed)

'''
First of all, we initialize the customer's tokenBalance and reserveBalance 
by Gaussian distributed random number (mu = 200, sigma = 0.1)
'''
custInitReserveBalance_mu = 200
custInitTokenBalance_mu = 200
custInitReserveBalance_list = np.random.normal(custInitReserveBalance_mu, 0.1, custNum) # 0.5 is sigma
custInitTokenBalance_list = np.random.normal(custInitTokenBalance_mu, 0.1, custNum) # 0.5 is sigma

if sum(custInitTokenBalance_list) > (initIssue * (1 - CRR)):
    print 'ERROR, too many init smart tokens holding by customers.'
    sys.exit(0)

custList = []
# here we name single customer as Joe. And every customer is initialized with 
# random value of token balance as well as reserve balance.
for i in range(custNum):
    Joe = Customers(smartToken = KennyCoin, market = MyBancorMarket, 
                    tokenBalance = custInitTokenBalance_list[i], 
                    reserveBalance = custInitReserveBalance_list[i])
    custList.append(Joe)

# cashTracker records custmers' cash
# cashTracker = []
# priceTracker records the change of the smart token's price in Bancor market
priceTracker = []
# transaction tracker records the transations' number in each time slot
txTracker = []
# canceled transaction tracker records the canceled transactions' number in each time slot
canceledTxTracker = []

for j in range(TimeSlotNum):
    # Sychronize the market
    sychronizeMarket(MyBancorMarket, j)

    # we assume that in every time slot, all customers change their valuation
    currentMarketPrice = MyBancorMarket.getCurrentPrice()
    if (j > 0) and (j % bouncingInterval == 0):
        ''' 
        We assume the valuation_mu is generated by random, which denotes the mean valuation
        of customers when the good or bad news comes into market on a certain time slot,
        which is divided by bouncing interval.
        '''
        valuation_mu = random.uniform(currentMarketPrice/bouncingRange, currentMarketPrice*bouncingRange)
    else:
        valuation_mu = currentMarketPrice

    custValuation_list = np.random.normal(valuation_mu, sigma, custNum)
    for i in range(custNum):
        custList[i].changeValuation(custValuation_list[i])

    priceTracker.append(KennyCoin.getPrice())
    txTracker.append(MyBancorMarket.getTransactionNum())
    canceledTxTracker.append(MyBancorMarket.getCanceledTransactionNum())

    # show some information in terminal
    print ('In time slot:'+str(j)+' | '+str(MyBancorMarket.getTransactionNum())+
        ' happens. And '+str(MyBancorMarket.getCanceledTransactionNum())+' transactions are canceled.')

'''Plotting'''

# Figure about price changing
pricePlot = []
myX_P = []
for j in range(TimeSlotNum):
    pricePlot.append(priceTracker[j])
    myX_P.append(j)
    j = j + 1
x_P = np.asarray(myX_P)
y_P = np.asarray(pricePlot)
plt.plot(x_P, y_P, 'o-',color = 'navy', alpha = 0.8)
plt.title('Price Change For Bancor Market',fontsize = 25)
plt.xlabel('Time Slot #',fontsize = 15)
plt.ylabel('Price of Smart Token', fontsize = 15)
plt.savefig('Figures/Price.png', bbox_inches='tight')
plt.close()

# Figure about transactions
txPlot = []
myX_T = []
for j in range(TimeSlotNum):
    txPlot.append(txTracker[j])
    myX_T.append(j)
    j = j + 1
x_T = np.asarray(myX_T)
y_T = np.asarray(txPlot)
plt.plot(x_T, y_T, 'o-',color = 'navy', alpha = 0.8)
plt.title('Transaction Num For Bancor Market',fontsize = 25)
plt.xlabel('Time Slot #',fontsize = 15)
plt.ylabel('Transaction #', fontsize = 15)
plt.savefig('Figures/Transactions.png', bbox_inches='tight')
plt.close()

# Figure about canceled transactions
canceledTxPlot = []
myX_C = []
for j in range(TimeSlotNum):
    canceledTxPlot.append(txTracker[j])
    myX_C.append(j)
    j = j + 1
x_C = np.asarray(myX_C)
y_C = np.asarray(canceledTxPlot)
plt.plot(x_C, y_C, 'o-',color = 'navy', alpha = 0.8)
plt.title('Canceled Transaction Num For Bancor Market',fontsize = 25)
plt.xlabel('Time Slot #',fontsize = 15)
plt.ylabel('Canceled Transaction #', fontsize = 15)
plt.savefig('Figures/CanceledTx.png', bbox_inches='tight')
plt.close()

















